@page "/summary"

@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@inject IProductService _productService;

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif"/>
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1">
                        <p style="font-size:x-large;margin:0px;">Order Summary</p>
                    </div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>
                @foreach (var productOrdered in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@productOrdered.Product.ImageUrl" width="100%">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @productOrdered.ProductName </span><br/>
                            <span class="pt-1">Size : @productOrdered.Size</span><br/>
                            <span class="pt-1">Count : @productOrdered.Count</span><br/>

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                USD
                                <span style="border-bottom:1px solid #ff6a00">
                                    @((productOrdered.Count * productOrdered.Price).ToString("C"))
                                </span>
                            </h4>
                        </div>
                    </div>
                }

                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">@Order.OrderHeader.OrderTotal.ToString("C")</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" OnValidSubmit="HandleCheckout">
                    <DataAnnotationsValidator/>
                    <div class="row px-2 text-success border-bottom">
                        <div class="col-7 py-1">
                            <p style="font-size:x-large;margin:0px;">Enter Details</p>
                        </div>
                    </div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="Order.OrderHeader.Name" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.Name"/>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.OrderHeader.PhoneNumber" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.PhoneNumber"/>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHeader.Email" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.Email"/>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="Order.OrderHeader.StreetAddress" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.StreetAddress"/>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="Order.OrderHeader.City" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.City"/>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.OrderHeader.State" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.State"/>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.OrderHeader.PostalCode" type="text" class="form-control"/>
                        <ValidationMessage For="() => Order.OrderHeader.PostalCode"/>
                    </div>
                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    private bool IsProcessing { get; set; }
    private OrderDTO Order { get; set; }
    private IEnumerable<ProductDTO> Products { get; set; }

    protected async override Task OnInitializedAsync()
    {
        IsProcessing = true;

        var cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(StaticDetails.ShoppingCart);
        Products = await _productService.GetAll();
        Order = new OrderDTO
        {
            OrderHeader = new OrderHeaderDTO
            {
                OrderTotal = 0,
                Status = StaticDetails.StatusPending
            },
            OrderDetails = new List<OrderDetailDTO>()
        };

        foreach (var item in cart)
        {
            var product = Products.FirstOrDefault(product => product.Id == item.ProductId);
            var productPrice = product.ProductPrices.FirstOrDefault(price => price.Id == item.ProductPriceId);

            var orderDetailDTO = new OrderDetailDTO
            {
                ProductId = item.ProductId,
                Size = productPrice.Size,
                Count = item.Count,
                Price = productPrice.Price,
                ProductName = product.Name,
                Product = product
            };
            Order.OrderDetails.Add(orderDetailDTO);
            Order.OrderHeader.OrderTotal += cart.Count * productPrice.Price;
        }


        IsProcessing = false;
    }

    private async void HandleCheckout()
    {
    }

}